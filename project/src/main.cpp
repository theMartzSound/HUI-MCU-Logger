#include <iostream>
#include <thread>
#include "rtmidi/RtMidi.h"

#include "PortSelection.h"
#include "InterpretMIDI.h"

/*  HUI/MCU Output Logger
    
    A simple application which translates and logs specific output messages generated by a DAW using the HUI or MCU protocols.
    
    This application was designed to identify how output messages are commonly grouped when using both protocols in the same
    device.  This will help lead to an effective demultiplexing circuit design for the MCon.  However, this utility can be
    modified to listen for other messages in these protocols.
*/

/* Port handles */
RtMidiIn* HUI_In = nullptr;   // HUI protocol input port
RtMidiIn* MCU_In = nullptr;   // MCU protocol input port
RtMidiOut* HUI_Out = nullptr; // HUI protocol output port
RtMidiOut* MCU_Out = nullptr; // MCU protocol output port

static bool looping = true;
void logHUI()
{
    using namespace std::literals::chrono_literals;

    while (looping)
    {
        handleHUIInbound(HUI_In);
        std::this_thread::sleep_for(20ms);
    }
}
void logMCU()
{
    using namespace std::literals::chrono_literals;

    while (looping)
    {
        handleMCUInbound(MCU_In);
        std::this_thread::sleep_for(20ms);
    }
}

void cleanup()
{
    delete HUI_In;  // HUI protocol input port
    delete MCU_In;  // MCU protocol input port
    delete HUI_Out; // HUI protocol output port
    delete MCU_Out; // MCU protocol output port
}

int main()
{
    // Construct the handles
    try {
        HUI_In = new RtMidiIn(RtMidi::UNSPECIFIED, "HUI Input Client", 200U);
        MCU_In = new RtMidiIn(RtMidi::UNSPECIFIED, "MCU Input Client", 200U);
        HUI_Out = new RtMidiOut();
        MCU_Out = new RtMidiOut();
    }
    catch (RtMidiError & e) {
        e.printMessage();
        cleanup();
        return EXIT_FAILURE;
    }

    // Unignore SysEx messages.  Ignore timing and active sensing messages.
    HUI_In->ignoreTypes(false, true, true);
    MCU_In->ignoreTypes(false, true, true);

    // Open MIDI ports
    try {
        std::cout << "\nSetting up HUI IN..." << std::endl;
        openMIDIPort(HUI_In);
        std::cout << "\nSetting up MCU IN..." << std::endl;
        openMIDIPort(MCU_In);
        std::cout << "\nSetting up HUI OUT..." << std::endl;
        openMIDIPort(HUI_Out);
        std::cout << "\nSetting up MCU OUT..." << std::endl;
        openMIDIPort(MCU_Out);
    }
    catch (RtMidiError & e) {
        e.printMessage();
        cleanup();
        return EXIT_FAILURE;
    }
    catch (NoPorts & e) {
        std::cout << e.what() << std::endl;
        cleanup();
        return EXIT_FAILURE;
    }

    // Log until the user presses Enter
    std::cout << "Logging messages.  Press Enter to stop." << std::endl;
    std::thread HUIlogger(logHUI);
    std::thread MCUlogger(logMCU);
    std::cin.get();
    looping = false;
    HUIlogger.join();
    MCUlogger.join();

    cleanup();
    std::cout << "Logging terminated.  Press Enter again to quit.";
    std::cin.get();

    return EXIT_SUCCESS;
}