#include <iostream>
//#include <string>
//#include <cstdlib>
//#include <typeinfo>
#include "rtmidi/RtMidi.h"
#include "PortSelection.h"

/*  HUI/MCU Output Logger
    
    A simple application which translates and logs specific output messages generated by a DAW using the HUI or MCU protocols.
    
    This application was designed to identify how output messages are commonly grouped when using both protocols in the same
    device.  This will help lead to an effective demultiplexing circuit design for the MCon.  However, this utility can be
    modified to listen for other messages in these protocols.
*/

std::vector<unsigned char> message;

// Sleep methods
#ifdef __WINDOWS_MM__
#include <windows.h> // Needed for Sleep().
#define SLEEP( milliseconds ) Sleep( (DWORD) milliseconds ) 
#endif

void HUICallback(double deltaTime, std::vector<unsigned char>* message, void* userData)
{
    std::cout << "HUI message: ";
    for (auto it = message->begin(); it != message->end(); ++it)
        std::cout << std::hex << (int)*it << " ";
    std::cout << std::endl;
    //std::cout << std::endl << "* Stamp = " << deltaTime << std::endl;

    // TODO: Fix ordering problem when Nuendo launches and closes
    // TODO: Log output to external file
}

void MCUCallback(double deltaTime, std::vector<unsigned char>* message, void* userData)
{
    std::cout << "HUI message: ";
    for (auto it = message->begin(); it != message->end(); ++it)
        std::cout << std::hex << (int)*it << " " << std::endl;
    std::cout << std::endl;
	//std::cout << std::endl << "* Stamp = " << deltaTime << std::endl;
}

int main()
{
    /* Port handles */
    RtMidiIn* HUI_In = 0;   // HUI protocol input port
    RtMidiIn* MCU_In = 0;   // MCU protocol input port
    RtMidiOut* HUI_Out = 0; // HUI protocol output port
    RtMidiOut* MCU_Out = 0; // MCU protocol output port

    // Construct the handles
    try {
        HUI_In = new RtMidiIn();
        MCU_In = new RtMidiIn();
        HUI_Out = new RtMidiOut();
        MCU_Out = new RtMidiOut();
    }
    catch (RtMidiError & e) {
        e.printMessage();
        goto cleanup;
    }

    // Unignore SysEx messages.  Ignore timing and active sensing messages.
    HUI_In->ignoreTypes(false, true, true);
    MCU_In->ignoreTypes(false, true, true);

    // Open MIDI ports
    try {
        std::cout << "\nSetting up HUI IN..." << std::endl;
        if (!openMIDIPort(HUI_In)) goto cleanup;
        std::cout << "\nSetting up MCU IN..." << std::endl;
        if (!openMIDIPort(MCU_In)) goto cleanup;
        std::cout << "\nSetting up HUI OUT..." << std::endl;
        if (!openMIDIPort(HUI_Out)) goto cleanup;
        std::cout << "\nSetting up MCU OUT..." << std::endl;
        if (!openMIDIPort(MCU_Out)) goto cleanup;
    }
    catch (RtMidiError & e) {
        e.printMessage();
        goto cleanup;
    }

    // Set callback functions
    HUI_In->getMessage(&message);
    while (message.size() > 0)
		HUI_In->getMessage(&message); //clear the queue
    HUI_In->setCallback(&HUICallback);

    MCU_In->getMessage(&message);
    while (message.size() > 0)
        MCU_In->getMessage(&message); //clear the queue
    MCU_In->setCallback(&MCUCallback);


    // Log until the user presses Enter
    std::cout << "Logging messages.  Press Enter to quit." << std::endl;
    std::cin.get();

    // Clean up
    // TODO: eliminate use of "goto:".
cleanup:
    delete HUI_In;  // HUI protocol input port
    delete MCU_In;  // MCU protocol input port
    delete HUI_Out; // HUI protocol output port
    delete MCU_Out; // MCU protocol output port

    return 0;
}